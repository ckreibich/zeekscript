#! /usr/bin/env python
"""
This is a tool for processing Zeek scripts. It currently supports formatting
scripts according to codified rules (no optionas at all atm), and showing a
parse tree for the script.
"""
import argparse
import sys

import zeekscript

# ---- Helper functions --------------------------------------------------------

def print_error(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)

def node_str(node, indent, script):
    content = ''
    if node.is_named:
        # Cap the amount we show in the tree ...
        content = script.source[node.start_byte:node.end_byte][:100]
        # ... and render it such that we get backslash-escapes.
        content = str(repr(content.decode('ascii', 'ignore')))
    return ' ' * (4*indent) + '{} ({}.{},{}.{}) {}'.format(
        node.type, node.start_point[0], node.start_point[1],
        node.end_point[0], node.end_point[1], content)

def create_parser():
    parser = argparse.ArgumentParser(description='A Zeek script analyzer')

    command_parser = parser.add_subparsers(
        title='commands', dest='command',
        help='See `%(prog)s <command> -h` for per-command usage info.')

    # format

    sub_parser = command_parser.add_parser(
        'format', help='Format/indent Zeek scripts')
    sub_parser.set_defaults(run_cmd=cmd_format)
    sub_parser.add_argument(
        '--inplace', '-i', action='store_true',
        help='change provided files instead of writing to stdout')
    sub_parser.add_argument(
        'scripts', metavar='FILES', action='append',
        help='Zeek script(s) to process. Use "-" for stdin.')

    # parse

    sub_parser = command_parser.add_parser(
        'parse', help='Show Zeek script parse tree')
    sub_parser.set_defaults(run_cmd=cmd_parse)
    sub_parser.add_argument(
        'script', metavar='FILE', help='Zeek script to parse. Use "-" for stdin.')

    return parser

# ---- CLI commands ------------------------------------------------------------

def cmd_format(args):
    for fname in args.scripts:
        ofname = fname if args.inplace else None
        script = zeekscript.Script(fname, ofname)

        try:
            script.parse()
        except zeekscript.Error as err:
            print_error('error: ' + str(err))
            return 1

        script.format()

    return 0

def cmd_parse(args):
    script = zeekscript.Script(args.script)

    try:
        script.parse()
    except zeekscript.ParserError as err:
        print_error('parsing error: ' + str(err))
        print_error('starting line: ' + err.line)
        return 1
    except zeekscript.Error as err:
        print_error('error: ' + str(err))
        return 1

    for node, indent in script.traverse():
        print(node_str(node, indent, script))

    return 0

def main():
    parser = create_parser()
    args = parser.parse_args()

    if not args.command:
        print_error('error: please provide a command to execute. See --help.')
        return 1

    try:
        return args.run_cmd(args)
    except KeyboardInterrupt:
        return 0

if __name__ == '__main__':
    sys.exit(main())
